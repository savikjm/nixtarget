#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Bonitet.DAL
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="TargetFinancial")]
	public partial class TargetFinancialDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertAdminUser(AdminUser instance);
    partial void UpdateAdminUser(AdminUser instance);
    partial void DeleteAdminUser(AdminUser instance);
    partial void InsertXmlResponse(XmlResponse instance);
    partial void UpdateXmlResponse(XmlResponse instance);
    partial void DeleteXmlResponse(XmlResponse instance);
    partial void InsertCompany(Company instance);
    partial void UpdateCompany(Company instance);
    partial void DeleteCompany(Company instance);
    partial void InsertCompanyValue(CompanyValue instance);
    partial void UpdateCompanyValue(CompanyValue instance);
    partial void DeleteCompanyValue(CompanyValue instance);
    partial void InsertCompanyValuesBak(CompanyValuesBak instance);
    partial void UpdateCompanyValuesBak(CompanyValuesBak instance);
    partial void DeleteCompanyValuesBak(CompanyValuesBak instance);
    partial void InsertCompanyYear(CompanyYear instance);
    partial void UpdateCompanyYear(CompanyYear instance);
    partial void DeleteCompanyYear(CompanyYear instance);
    partial void InsertCompanyYearsBak(CompanyYearsBak instance);
    partial void UpdateCompanyYearsBak(CompanyYearsBak instance);
    partial void DeleteCompanyYearsBak(CompanyYearsBak instance);
    partial void InsertCRMResponse(CRMResponse instance);
    partial void UpdateCRMResponse(CRMResponse instance);
    partial void DeleteCRMResponse(CRMResponse instance);
    partial void InsertGlobalConfig(GlobalConfig instance);
    partial void UpdateGlobalConfig(GlobalConfig instance);
    partial void DeleteGlobalConfig(GlobalConfig instance);
    partial void InsertPrepayPack(PrepayPack instance);
    partial void UpdatePrepayPack(PrepayPack instance);
    partial void DeletePrepayPack(PrepayPack instance);
    partial void InsertReportLog(ReportLog instance);
    partial void UpdateReportLog(ReportLog instance);
    partial void DeleteReportLog(ReportLog instance);
    partial void InsertReportRequest(ReportRequest instance);
    partial void UpdateReportRequest(ReportRequest instance);
    partial void DeleteReportRequest(ReportRequest instance);
    partial void InsertReport(Report instance);
    partial void UpdateReport(Report instance);
    partial void DeleteReport(Report instance);
    partial void InsertReportValue(ReportValue instance);
    partial void UpdateReportValue(ReportValue instance);
    partial void DeleteReportValue(ReportValue instance);
    partial void InsertUserReport(UserReport instance);
    partial void UpdateUserReport(UserReport instance);
    partial void DeleteUserReport(UserReport instance);
    partial void InsertUser(User instance);
    partial void UpdateUser(User instance);
    partial void DeleteUser(User instance);
    partial void InsertValue(Value instance);
    partial void UpdateValue(Value instance);
    partial void DeleteValue(Value instance);
    partial void InsertReportValuesBackup(ReportValuesBackup instance);
    partial void UpdateReportValuesBackup(ReportValuesBackup instance);
    partial void DeleteReportValuesBackup(ReportValuesBackup instance);
    #endregion
		
		public TargetFinancialDataContext() : 
				base(global::Bonitet.DAL.Properties.Settings.Default.TargetFinancialConnectionString2, mappingSource)
		{
			OnCreated();
		}
		
		public TargetFinancialDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public TargetFinancialDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public TargetFinancialDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public TargetFinancialDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<AdminUser> AdminUsers
		{
			get
			{
				return this.GetTable<AdminUser>();
			}
		}
		
		public System.Data.Linq.Table<XmlResponse> XmlResponses
		{
			get
			{
				return this.GetTable<XmlResponse>();
			}
		}
		
		public System.Data.Linq.Table<CollectedCompanyData> CollectedCompanyDatas
		{
			get
			{
				return this.GetTable<CollectedCompanyData>();
			}
		}
		
		public System.Data.Linq.Table<Company> Companies
		{
			get
			{
				return this.GetTable<Company>();
			}
		}
		
		public System.Data.Linq.Table<CompanyValue> CompanyValues
		{
			get
			{
				return this.GetTable<CompanyValue>();
			}
		}
		
		public System.Data.Linq.Table<CompanyValuesBak> CompanyValuesBaks
		{
			get
			{
				return this.GetTable<CompanyValuesBak>();
			}
		}
		
		public System.Data.Linq.Table<CompanyYear> CompanyYears
		{
			get
			{
				return this.GetTable<CompanyYear>();
			}
		}
		
		public System.Data.Linq.Table<CompanyYearsBak> CompanyYearsBaks
		{
			get
			{
				return this.GetTable<CompanyYearsBak>();
			}
		}
		
		public System.Data.Linq.Table<CRMResponse> CRMResponses
		{
			get
			{
				return this.GetTable<CRMResponse>();
			}
		}
		
		public System.Data.Linq.Table<GlobalConfig> GlobalConfigs
		{
			get
			{
				return this.GetTable<GlobalConfig>();
			}
		}
		
		public System.Data.Linq.Table<PrepayPack> PrepayPacks
		{
			get
			{
				return this.GetTable<PrepayPack>();
			}
		}
		
		public System.Data.Linq.Table<ReportLog> ReportLogs
		{
			get
			{
				return this.GetTable<ReportLog>();
			}
		}
		
		public System.Data.Linq.Table<ReportRequest> ReportRequests
		{
			get
			{
				return this.GetTable<ReportRequest>();
			}
		}
		
		public System.Data.Linq.Table<Report> Reports
		{
			get
			{
				return this.GetTable<Report>();
			}
		}
		
		public System.Data.Linq.Table<ReportValue> ReportValues
		{
			get
			{
				return this.GetTable<ReportValue>();
			}
		}
		
		public System.Data.Linq.Table<UserReport> UserReports
		{
			get
			{
				return this.GetTable<UserReport>();
			}
		}
		
		public System.Data.Linq.Table<User> Users
		{
			get
			{
				return this.GetTable<User>();
			}
		}
		
		public System.Data.Linq.Table<Value> Values
		{
			get
			{
				return this.GetTable<Value>();
			}
		}
		
		public System.Data.Linq.Table<ReportValuesBackup> ReportValuesBackups
		{
			get
			{
				return this.GetTable<ReportValuesBackup>();
			}
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.GetReportRequests")]
		public ISingleResult<GetReportRequestsResult> GetReportRequests()
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())));
			return ((ISingleResult<GetReportRequestsResult>)(result.ReturnValue));
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.AdminUsers")]
	public partial class AdminUser : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _Username;
		
		private string _Password;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnUsernameChanging(string value);
    partial void OnUsernameChanged();
    partial void OnPasswordChanging(string value);
    partial void OnPasswordChanged();
    #endregion
		
		public AdminUser()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Username", DbType="NVarChar(250) NOT NULL", CanBeNull=false)]
		public string Username
		{
			get
			{
				return this._Username;
			}
			set
			{
				if ((this._Username != value))
				{
					this.OnUsernameChanging(value);
					this.SendPropertyChanging();
					this._Username = value;
					this.SendPropertyChanged("Username");
					this.OnUsernameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Password", DbType="NVarChar(250) NOT NULL", CanBeNull=false)]
		public string Password
		{
			get
			{
				return this._Password;
			}
			set
			{
				if ((this._Password != value))
				{
					this.OnPasswordChanging(value);
					this.SendPropertyChanging();
					this._Password = value;
					this.SendPropertyChanged("Password");
					this.OnPasswordChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.XmlResponses")]
	public partial class XmlResponse : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _Text;
		
		private int _CRMResponseID;
		
		private int _Part;
		
		private EntityRef<CRMResponse> _CRMResponse;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnTextChanging(string value);
    partial void OnTextChanged();
    partial void OnCRMResponseIDChanging(int value);
    partial void OnCRMResponseIDChanged();
    partial void OnPartChanging(int value);
    partial void OnPartChanged();
    #endregion
		
		public XmlResponse()
		{
			this._CRMResponse = default(EntityRef<CRMResponse>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Text", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string Text
		{
			get
			{
				return this._Text;
			}
			set
			{
				if ((this._Text != value))
				{
					this.OnTextChanging(value);
					this.SendPropertyChanging();
					this._Text = value;
					this.SendPropertyChanged("Text");
					this.OnTextChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CRMResponseID", DbType="Int NOT NULL")]
		public int CRMResponseID
		{
			get
			{
				return this._CRMResponseID;
			}
			set
			{
				if ((this._CRMResponseID != value))
				{
					if (this._CRMResponse.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCRMResponseIDChanging(value);
					this.SendPropertyChanging();
					this._CRMResponseID = value;
					this.SendPropertyChanged("CRMResponseID");
					this.OnCRMResponseIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Part", DbType="Int NOT NULL")]
		public int Part
		{
			get
			{
				return this._Part;
			}
			set
			{
				if ((this._Part != value))
				{
					this.OnPartChanging(value);
					this.SendPropertyChanging();
					this._Part = value;
					this.SendPropertyChanged("Part");
					this.OnPartChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CRMResponse_XmlResponse", Storage="_CRMResponse", ThisKey="CRMResponseID", OtherKey="ID", IsForeignKey=true)]
		public CRMResponse CRMResponse
		{
			get
			{
				return this._CRMResponse.Entity;
			}
			set
			{
				CRMResponse previousValue = this._CRMResponse.Entity;
				if (((previousValue != value) 
							|| (this._CRMResponse.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._CRMResponse.Entity = null;
						previousValue.XmlResponses.Remove(this);
					}
					this._CRMResponse.Entity = value;
					if ((value != null))
					{
						value.XmlResponses.Add(this);
						this._CRMResponseID = value.ID;
					}
					else
					{
						this._CRMResponseID = default(int);
					}
					this.SendPropertyChanged("CRMResponse");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.CollectedCompanyData")]
	public partial class CollectedCompanyData
	{
		
		private System.Nullable<int> _CompanyID;
		
		private System.Nullable<int> _Year;
		
		private System.Nullable<double> _v301;
		
		private System.Nullable<double> _v302;
		
		private System.Nullable<double> _v303;
		
		private System.Nullable<double> _v304;
		
		private System.Nullable<double> _v305;
		
		private System.Nullable<double> _v306;
		
		private System.Nullable<double> _v307;
		
		private System.Nullable<double> _v308;
		
		private System.Nullable<double> _v309;
		
		private System.Nullable<double> _v310;
		
		private System.Nullable<double> _v311;
		
		private System.Nullable<double> _v312;
		
		private System.Nullable<double> _v313;
		
		private System.Nullable<double> _v314;
		
		private System.Nullable<double> _v315;
		
		private System.Nullable<double> _v316;
		
		private System.Nullable<double> _v317;
		
		private System.Nullable<double> _v318;
		
		private System.Nullable<double> _Type;
		
		public CollectedCompanyData()
		{
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CompanyID", DbType="Int")]
		public System.Nullable<int> CompanyID
		{
			get
			{
				return this._CompanyID;
			}
			set
			{
				if ((this._CompanyID != value))
				{
					this._CompanyID = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Year", DbType="Int")]
		public System.Nullable<int> Year
		{
			get
			{
				return this._Year;
			}
			set
			{
				if ((this._Year != value))
				{
					this._Year = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_v301", DbType="Float")]
		public System.Nullable<double> v301
		{
			get
			{
				return this._v301;
			}
			set
			{
				if ((this._v301 != value))
				{
					this._v301 = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_v302", DbType="Float")]
		public System.Nullable<double> v302
		{
			get
			{
				return this._v302;
			}
			set
			{
				if ((this._v302 != value))
				{
					this._v302 = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_v303", DbType="Float")]
		public System.Nullable<double> v303
		{
			get
			{
				return this._v303;
			}
			set
			{
				if ((this._v303 != value))
				{
					this._v303 = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_v304", DbType="Float")]
		public System.Nullable<double> v304
		{
			get
			{
				return this._v304;
			}
			set
			{
				if ((this._v304 != value))
				{
					this._v304 = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_v305", DbType="Float")]
		public System.Nullable<double> v305
		{
			get
			{
				return this._v305;
			}
			set
			{
				if ((this._v305 != value))
				{
					this._v305 = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_v306", DbType="Float")]
		public System.Nullable<double> v306
		{
			get
			{
				return this._v306;
			}
			set
			{
				if ((this._v306 != value))
				{
					this._v306 = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_v307", DbType="Float")]
		public System.Nullable<double> v307
		{
			get
			{
				return this._v307;
			}
			set
			{
				if ((this._v307 != value))
				{
					this._v307 = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_v308", DbType="Float")]
		public System.Nullable<double> v308
		{
			get
			{
				return this._v308;
			}
			set
			{
				if ((this._v308 != value))
				{
					this._v308 = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_v309", DbType="Float")]
		public System.Nullable<double> v309
		{
			get
			{
				return this._v309;
			}
			set
			{
				if ((this._v309 != value))
				{
					this._v309 = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_v310", DbType="Float")]
		public System.Nullable<double> v310
		{
			get
			{
				return this._v310;
			}
			set
			{
				if ((this._v310 != value))
				{
					this._v310 = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_v311", DbType="Float")]
		public System.Nullable<double> v311
		{
			get
			{
				return this._v311;
			}
			set
			{
				if ((this._v311 != value))
				{
					this._v311 = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_v312", DbType="Float")]
		public System.Nullable<double> v312
		{
			get
			{
				return this._v312;
			}
			set
			{
				if ((this._v312 != value))
				{
					this._v312 = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_v313", DbType="Float")]
		public System.Nullable<double> v313
		{
			get
			{
				return this._v313;
			}
			set
			{
				if ((this._v313 != value))
				{
					this._v313 = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_v314", DbType="Float")]
		public System.Nullable<double> v314
		{
			get
			{
				return this._v314;
			}
			set
			{
				if ((this._v314 != value))
				{
					this._v314 = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_v315", DbType="Float")]
		public System.Nullable<double> v315
		{
			get
			{
				return this._v315;
			}
			set
			{
				if ((this._v315 != value))
				{
					this._v315 = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_v316", DbType="Float")]
		public System.Nullable<double> v316
		{
			get
			{
				return this._v316;
			}
			set
			{
				if ((this._v316 != value))
				{
					this._v316 = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_v317", DbType="Float")]
		public System.Nullable<double> v317
		{
			get
			{
				return this._v317;
			}
			set
			{
				if ((this._v317 != value))
				{
					this._v317 = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_v318", DbType="Float")]
		public System.Nullable<double> v318
		{
			get
			{
				return this._v318;
			}
			set
			{
				if ((this._v318 != value))
				{
					this._v318 = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Type", DbType="Float")]
		public System.Nullable<double> Type
		{
			get
			{
				return this._Type;
			}
			set
			{
				if ((this._Type != value))
				{
					this._Type = value;
				}
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Company")]
	public partial class Company : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _EMBS;
		
		private string _Name;
		
		private string _Mesto;
		
		private EntitySet<CompanyYear> _CompanyYears;
		
		private EntitySet<CompanyYearsBak> _CompanyYearsBaks;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnEMBSChanging(string value);
    partial void OnEMBSChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnMestoChanging(string value);
    partial void OnMestoChanged();
    #endregion
		
		public Company()
		{
			this._CompanyYears = new EntitySet<CompanyYear>(new Action<CompanyYear>(this.attach_CompanyYears), new Action<CompanyYear>(this.detach_CompanyYears));
			this._CompanyYearsBaks = new EntitySet<CompanyYearsBak>(new Action<CompanyYearsBak>(this.attach_CompanyYearsBaks), new Action<CompanyYearsBak>(this.detach_CompanyYearsBaks));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EMBS", DbType="NVarChar(250) NOT NULL", CanBeNull=false)]
		public string EMBS
		{
			get
			{
				return this._EMBS;
			}
			set
			{
				if ((this._EMBS != value))
				{
					this.OnEMBSChanging(value);
					this.SendPropertyChanging();
					this._EMBS = value;
					this.SendPropertyChanged("EMBS");
					this.OnEMBSChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(500) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Mesto", DbType="NVarChar(250)")]
		public string Mesto
		{
			get
			{
				return this._Mesto;
			}
			set
			{
				if ((this._Mesto != value))
				{
					this.OnMestoChanging(value);
					this.SendPropertyChanging();
					this._Mesto = value;
					this.SendPropertyChanged("Mesto");
					this.OnMestoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Company_CompanyYear", Storage="_CompanyYears", ThisKey="ID", OtherKey="CompanyID")]
		public EntitySet<CompanyYear> CompanyYears
		{
			get
			{
				return this._CompanyYears;
			}
			set
			{
				this._CompanyYears.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Company_CompanyYearsBak", Storage="_CompanyYearsBaks", ThisKey="ID", OtherKey="CompanyID")]
		public EntitySet<CompanyYearsBak> CompanyYearsBaks
		{
			get
			{
				return this._CompanyYearsBaks;
			}
			set
			{
				this._CompanyYearsBaks.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_CompanyYears(CompanyYear entity)
		{
			this.SendPropertyChanging();
			entity.Company = this;
		}
		
		private void detach_CompanyYears(CompanyYear entity)
		{
			this.SendPropertyChanging();
			entity.Company = null;
		}
		
		private void attach_CompanyYearsBaks(CompanyYearsBak entity)
		{
			this.SendPropertyChanging();
			entity.Company = this;
		}
		
		private void detach_CompanyYearsBaks(CompanyYearsBak entity)
		{
			this.SendPropertyChanging();
			entity.Company = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.CompanyValues")]
	public partial class CompanyValue : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private int _CompanyID;
		
		private int _ValueID;
		
		private double _Value;
		
		private int _YearID;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnCompanyIDChanging(int value);
    partial void OnCompanyIDChanged();
    partial void OnValueIDChanging(int value);
    partial void OnValueIDChanged();
    partial void OnValueChanging(double value);
    partial void OnValueChanged();
    partial void OnYearIDChanging(int value);
    partial void OnYearIDChanged();
    #endregion
		
		public CompanyValue()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CompanyID", DbType="Int NOT NULL")]
		public int CompanyID
		{
			get
			{
				return this._CompanyID;
			}
			set
			{
				if ((this._CompanyID != value))
				{
					this.OnCompanyIDChanging(value);
					this.SendPropertyChanging();
					this._CompanyID = value;
					this.SendPropertyChanged("CompanyID");
					this.OnCompanyIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ValueID", DbType="Int NOT NULL")]
		public int ValueID
		{
			get
			{
				return this._ValueID;
			}
			set
			{
				if ((this._ValueID != value))
				{
					this.OnValueIDChanging(value);
					this.SendPropertyChanging();
					this._ValueID = value;
					this.SendPropertyChanged("ValueID");
					this.OnValueIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Value", DbType="Float NOT NULL")]
		public double Value
		{
			get
			{
				return this._Value;
			}
			set
			{
				if ((this._Value != value))
				{
					this.OnValueChanging(value);
					this.SendPropertyChanging();
					this._Value = value;
					this.SendPropertyChanged("Value");
					this.OnValueChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_YearID", DbType="Int NOT NULL")]
		public int YearID
		{
			get
			{
				return this._YearID;
			}
			set
			{
				if ((this._YearID != value))
				{
					this.OnYearIDChanging(value);
					this.SendPropertyChanging();
					this._YearID = value;
					this.SendPropertyChanged("YearID");
					this.OnYearIDChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.CompanyValuesBak")]
	public partial class CompanyValuesBak : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private int _CompanyID;
		
		private int _ValueID;
		
		private double _Value;
		
		private int _YearID;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnCompanyIDChanging(int value);
    partial void OnCompanyIDChanged();
    partial void OnValueIDChanging(int value);
    partial void OnValueIDChanged();
    partial void OnValueChanging(double value);
    partial void OnValueChanged();
    partial void OnYearIDChanging(int value);
    partial void OnYearIDChanged();
    #endregion
		
		public CompanyValuesBak()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CompanyID", DbType="Int NOT NULL")]
		public int CompanyID
		{
			get
			{
				return this._CompanyID;
			}
			set
			{
				if ((this._CompanyID != value))
				{
					this.OnCompanyIDChanging(value);
					this.SendPropertyChanging();
					this._CompanyID = value;
					this.SendPropertyChanged("CompanyID");
					this.OnCompanyIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ValueID", DbType="Int NOT NULL")]
		public int ValueID
		{
			get
			{
				return this._ValueID;
			}
			set
			{
				if ((this._ValueID != value))
				{
					this.OnValueIDChanging(value);
					this.SendPropertyChanging();
					this._ValueID = value;
					this.SendPropertyChanged("ValueID");
					this.OnValueIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Value", DbType="Float NOT NULL")]
		public double Value
		{
			get
			{
				return this._Value;
			}
			set
			{
				if ((this._Value != value))
				{
					this.OnValueChanging(value);
					this.SendPropertyChanging();
					this._Value = value;
					this.SendPropertyChanged("Value");
					this.OnValueChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_YearID", DbType="Int NOT NULL")]
		public int YearID
		{
			get
			{
				return this._YearID;
			}
			set
			{
				if ((this._YearID != value))
				{
					this.OnYearIDChanging(value);
					this.SendPropertyChanging();
					this._YearID = value;
					this.SendPropertyChanged("YearID");
					this.OnYearIDChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.CompanyYears")]
	public partial class CompanyYear : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private int _Year;
		
		private int _CompanyID;
		
		private EntityRef<Company> _Company;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnYearChanging(int value);
    partial void OnYearChanged();
    partial void OnCompanyIDChanging(int value);
    partial void OnCompanyIDChanged();
    #endregion
		
		public CompanyYear()
		{
			this._Company = default(EntityRef<Company>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Year", DbType="Int NOT NULL")]
		public int Year
		{
			get
			{
				return this._Year;
			}
			set
			{
				if ((this._Year != value))
				{
					this.OnYearChanging(value);
					this.SendPropertyChanging();
					this._Year = value;
					this.SendPropertyChanged("Year");
					this.OnYearChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CompanyID", DbType="Int NOT NULL")]
		public int CompanyID
		{
			get
			{
				return this._CompanyID;
			}
			set
			{
				if ((this._CompanyID != value))
				{
					if (this._Company.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCompanyIDChanging(value);
					this.SendPropertyChanging();
					this._CompanyID = value;
					this.SendPropertyChanged("CompanyID");
					this.OnCompanyIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Company_CompanyYear", Storage="_Company", ThisKey="CompanyID", OtherKey="ID", IsForeignKey=true)]
		public Company Company
		{
			get
			{
				return this._Company.Entity;
			}
			set
			{
				Company previousValue = this._Company.Entity;
				if (((previousValue != value) 
							|| (this._Company.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Company.Entity = null;
						previousValue.CompanyYears.Remove(this);
					}
					this._Company.Entity = value;
					if ((value != null))
					{
						value.CompanyYears.Add(this);
						this._CompanyID = value.ID;
					}
					else
					{
						this._CompanyID = default(int);
					}
					this.SendPropertyChanged("Company");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.CompanyYearsBak")]
	public partial class CompanyYearsBak : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private int _Year;
		
		private int _CompanyID;
		
		private EntityRef<Company> _Company;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnYearChanging(int value);
    partial void OnYearChanged();
    partial void OnCompanyIDChanging(int value);
    partial void OnCompanyIDChanged();
    #endregion
		
		public CompanyYearsBak()
		{
			this._Company = default(EntityRef<Company>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Year", DbType="Int NOT NULL")]
		public int Year
		{
			get
			{
				return this._Year;
			}
			set
			{
				if ((this._Year != value))
				{
					this.OnYearChanging(value);
					this.SendPropertyChanging();
					this._Year = value;
					this.SendPropertyChanged("Year");
					this.OnYearChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CompanyID", DbType="Int NOT NULL")]
		public int CompanyID
		{
			get
			{
				return this._CompanyID;
			}
			set
			{
				if ((this._CompanyID != value))
				{
					if (this._Company.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCompanyIDChanging(value);
					this.SendPropertyChanging();
					this._CompanyID = value;
					this.SendPropertyChanged("CompanyID");
					this.OnCompanyIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Company_CompanyYearsBak", Storage="_Company", ThisKey="CompanyID", OtherKey="ID", IsForeignKey=true)]
		public Company Company
		{
			get
			{
				return this._Company.Entity;
			}
			set
			{
				Company previousValue = this._Company.Entity;
				if (((previousValue != value) 
							|| (this._Company.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Company.Entity = null;
						previousValue.CompanyYearsBaks.Remove(this);
					}
					this._Company.Entity = value;
					if ((value != null))
					{
						value.CompanyYearsBaks.Add(this);
						this._CompanyID = value.ID;
					}
					else
					{
						this._CompanyID = default(int);
					}
					this.SendPropertyChanged("Company");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.CRMResponses")]
	public partial class CRMResponse : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private int _CompanyID;
		
		private int _ReportID;
		
		private int _Year;
		
		private string _XmlResponse;
		
		private int _Type;
		
		private System.Nullable<System.DateTime> _ResponseData;
		
		private EntitySet<XmlResponse> _XmlResponses;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnCompanyIDChanging(int value);
    partial void OnCompanyIDChanged();
    partial void OnReportIDChanging(int value);
    partial void OnReportIDChanged();
    partial void OnYearChanging(int value);
    partial void OnYearChanged();
    partial void OnXmlResponseChanging(string value);
    partial void OnXmlResponseChanged();
    partial void OnTypeChanging(int value);
    partial void OnTypeChanged();
    partial void OnResponseDataChanging(System.Nullable<System.DateTime> value);
    partial void OnResponseDataChanged();
    #endregion
		
		public CRMResponse()
		{
			this._XmlResponses = new EntitySet<XmlResponse>(new Action<XmlResponse>(this.attach_XmlResponses), new Action<XmlResponse>(this.detach_XmlResponses));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CompanyID", DbType="Int NOT NULL")]
		public int CompanyID
		{
			get
			{
				return this._CompanyID;
			}
			set
			{
				if ((this._CompanyID != value))
				{
					this.OnCompanyIDChanging(value);
					this.SendPropertyChanging();
					this._CompanyID = value;
					this.SendPropertyChanged("CompanyID");
					this.OnCompanyIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ReportID", DbType="Int NOT NULL")]
		public int ReportID
		{
			get
			{
				return this._ReportID;
			}
			set
			{
				if ((this._ReportID != value))
				{
					this.OnReportIDChanging(value);
					this.SendPropertyChanging();
					this._ReportID = value;
					this.SendPropertyChanged("ReportID");
					this.OnReportIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Year", DbType="Int NOT NULL")]
		public int Year
		{
			get
			{
				return this._Year;
			}
			set
			{
				if ((this._Year != value))
				{
					this.OnYearChanging(value);
					this.SendPropertyChanging();
					this._Year = value;
					this.SendPropertyChanged("Year");
					this.OnYearChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_XmlResponse", DbType="NVarChar(MAX)")]
		public string XmlResponse
		{
			get
			{
				return this._XmlResponse;
			}
			set
			{
				if ((this._XmlResponse != value))
				{
					this.OnXmlResponseChanging(value);
					this.SendPropertyChanging();
					this._XmlResponse = value;
					this.SendPropertyChanged("XmlResponse");
					this.OnXmlResponseChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Type", DbType="Int NOT NULL")]
		public int Type
		{
			get
			{
				return this._Type;
			}
			set
			{
				if ((this._Type != value))
				{
					this.OnTypeChanging(value);
					this.SendPropertyChanging();
					this._Type = value;
					this.SendPropertyChanged("Type");
					this.OnTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ResponseData", DbType="DateTime")]
		public System.Nullable<System.DateTime> ResponseData
		{
			get
			{
				return this._ResponseData;
			}
			set
			{
				if ((this._ResponseData != value))
				{
					this.OnResponseDataChanging(value);
					this.SendPropertyChanging();
					this._ResponseData = value;
					this.SendPropertyChanged("ResponseData");
					this.OnResponseDataChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CRMResponse_XmlResponse", Storage="_XmlResponses", ThisKey="ID", OtherKey="CRMResponseID")]
		public EntitySet<XmlResponse> XmlResponses
		{
			get
			{
				return this._XmlResponses;
			}
			set
			{
				this._XmlResponses.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_XmlResponses(XmlResponse entity)
		{
			this.SendPropertyChanging();
			entity.CRMResponse = this;
		}
		
		private void detach_XmlResponses(XmlResponse entity)
		{
			this.SendPropertyChanging();
			entity.CRMResponse = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.GlobalConfig")]
	public partial class GlobalConfig : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _GlobalYear;
		
		private int _ID;
		
		private System.Nullable<int> _ForcedYear;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnGlobalYearChanging(int value);
    partial void OnGlobalYearChanged();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnForcedYearChanging(System.Nullable<int> value);
    partial void OnForcedYearChanged();
    #endregion
		
		public GlobalConfig()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GlobalYear", DbType="Int NOT NULL")]
		public int GlobalYear
		{
			get
			{
				return this._GlobalYear;
			}
			set
			{
				if ((this._GlobalYear != value))
				{
					this.OnGlobalYearChanging(value);
					this.SendPropertyChanging();
					this._GlobalYear = value;
					this.SendPropertyChanged("GlobalYear");
					this.OnGlobalYearChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ForcedYear", DbType="Int")]
		public System.Nullable<int> ForcedYear
		{
			get
			{
				return this._ForcedYear;
			}
			set
			{
				if ((this._ForcedYear != value))
				{
					this.OnForcedYearChanging(value);
					this.SendPropertyChanging();
					this._ForcedYear = value;
					this.SendPropertyChanged("ForcedYear");
					this.OnForcedYearChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.PrepayPacks")]
	public partial class PrepayPack : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private System.DateTime _DateCreated;
		
		private System.DateTime _DateStart;
		
		private System.DateTime _DateEnd;
		
		private int _Pack;
		
		private int _Used;
		
		private int _UserID;
		
		private string _Comment;
		
		private bool _Active;
		
		private System.Nullable<int> _PackType;
		
		private bool _IsPostPaid;
		
		private EntitySet<UserReport> _UserReports;
		
		private EntityRef<User> _User;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnDateCreatedChanging(System.DateTime value);
    partial void OnDateCreatedChanged();
    partial void OnDateStartChanging(System.DateTime value);
    partial void OnDateStartChanged();
    partial void OnDateEndChanging(System.DateTime value);
    partial void OnDateEndChanged();
    partial void OnPackChanging(int value);
    partial void OnPackChanged();
    partial void OnUsedChanging(int value);
    partial void OnUsedChanged();
    partial void OnUserIDChanging(int value);
    partial void OnUserIDChanged();
    partial void OnCommentChanging(string value);
    partial void OnCommentChanged();
    partial void OnActiveChanging(bool value);
    partial void OnActiveChanged();
    partial void OnPackTypeChanging(System.Nullable<int> value);
    partial void OnPackTypeChanged();
    partial void OnIsPostPaidChanging(bool value);
    partial void OnIsPostPaidChanged();
    #endregion
		
		public PrepayPack()
		{
			this._UserReports = new EntitySet<UserReport>(new Action<UserReport>(this.attach_UserReports), new Action<UserReport>(this.detach_UserReports));
			this._User = default(EntityRef<User>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateCreated", DbType="DateTime NOT NULL")]
		public System.DateTime DateCreated
		{
			get
			{
				return this._DateCreated;
			}
			set
			{
				if ((this._DateCreated != value))
				{
					this.OnDateCreatedChanging(value);
					this.SendPropertyChanging();
					this._DateCreated = value;
					this.SendPropertyChanged("DateCreated");
					this.OnDateCreatedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateStart", DbType="DateTime NOT NULL")]
		public System.DateTime DateStart
		{
			get
			{
				return this._DateStart;
			}
			set
			{
				if ((this._DateStart != value))
				{
					this.OnDateStartChanging(value);
					this.SendPropertyChanging();
					this._DateStart = value;
					this.SendPropertyChanged("DateStart");
					this.OnDateStartChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateEnd", DbType="DateTime NOT NULL")]
		public System.DateTime DateEnd
		{
			get
			{
				return this._DateEnd;
			}
			set
			{
				if ((this._DateEnd != value))
				{
					this.OnDateEndChanging(value);
					this.SendPropertyChanging();
					this._DateEnd = value;
					this.SendPropertyChanged("DateEnd");
					this.OnDateEndChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Pack", DbType="Int NOT NULL")]
		public int Pack
		{
			get
			{
				return this._Pack;
			}
			set
			{
				if ((this._Pack != value))
				{
					this.OnPackChanging(value);
					this.SendPropertyChanging();
					this._Pack = value;
					this.SendPropertyChanged("Pack");
					this.OnPackChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Used", DbType="Int NOT NULL")]
		public int Used
		{
			get
			{
				return this._Used;
			}
			set
			{
				if ((this._Used != value))
				{
					this.OnUsedChanging(value);
					this.SendPropertyChanging();
					this._Used = value;
					this.SendPropertyChanged("Used");
					this.OnUsedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserID", DbType="Int NOT NULL")]
		public int UserID
		{
			get
			{
				return this._UserID;
			}
			set
			{
				if ((this._UserID != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIDChanging(value);
					this.SendPropertyChanging();
					this._UserID = value;
					this.SendPropertyChanged("UserID");
					this.OnUserIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Comment", DbType="NVarChar(500)")]
		public string Comment
		{
			get
			{
				return this._Comment;
			}
			set
			{
				if ((this._Comment != value))
				{
					this.OnCommentChanging(value);
					this.SendPropertyChanging();
					this._Comment = value;
					this.SendPropertyChanged("Comment");
					this.OnCommentChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Active", DbType="Bit NOT NULL")]
		public bool Active
		{
			get
			{
				return this._Active;
			}
			set
			{
				if ((this._Active != value))
				{
					this.OnActiveChanging(value);
					this.SendPropertyChanging();
					this._Active = value;
					this.SendPropertyChanged("Active");
					this.OnActiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PackType", DbType="Int")]
		public System.Nullable<int> PackType
		{
			get
			{
				return this._PackType;
			}
			set
			{
				if ((this._PackType != value))
				{
					this.OnPackTypeChanging(value);
					this.SendPropertyChanging();
					this._PackType = value;
					this.SendPropertyChanged("PackType");
					this.OnPackTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsPostPaid", DbType="Bit NOT NULL")]
		public bool IsPostPaid
		{
			get
			{
				return this._IsPostPaid;
			}
			set
			{
				if ((this._IsPostPaid != value))
				{
					this.OnIsPostPaidChanging(value);
					this.SendPropertyChanging();
					this._IsPostPaid = value;
					this.SendPropertyChanged("IsPostPaid");
					this.OnIsPostPaidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="PrepayPack_UserReport", Storage="_UserReports", ThisKey="ID", OtherKey="PackID")]
		public EntitySet<UserReport> UserReports
		{
			get
			{
				return this._UserReports;
			}
			set
			{
				this._UserReports.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_PrepayPack", Storage="_User", ThisKey="UserID", OtherKey="ID", IsForeignKey=true)]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.PrepayPacks.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.PrepayPacks.Add(this);
						this._UserID = value.ID;
					}
					else
					{
						this._UserID = default(int);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_UserReports(UserReport entity)
		{
			this.SendPropertyChanging();
			entity.PrepayPack = this;
		}
		
		private void detach_UserReports(UserReport entity)
		{
			this.SendPropertyChanging();
			entity.PrepayPack = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ReportLogs")]
	public partial class ReportLog : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private int _ReportID;
		
		private System.DateTime _DownloadDate;
		
		private EntityRef<Report> _Report;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnReportIDChanging(int value);
    partial void OnReportIDChanged();
    partial void OnDownloadDateChanging(System.DateTime value);
    partial void OnDownloadDateChanged();
    #endregion
		
		public ReportLog()
		{
			this._Report = default(EntityRef<Report>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ReportID", DbType="Int NOT NULL")]
		public int ReportID
		{
			get
			{
				return this._ReportID;
			}
			set
			{
				if ((this._ReportID != value))
				{
					if (this._Report.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnReportIDChanging(value);
					this.SendPropertyChanging();
					this._ReportID = value;
					this.SendPropertyChanged("ReportID");
					this.OnReportIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DownloadDate", DbType="DateTime NOT NULL")]
		public System.DateTime DownloadDate
		{
			get
			{
				return this._DownloadDate;
			}
			set
			{
				if ((this._DownloadDate != value))
				{
					this.OnDownloadDateChanging(value);
					this.SendPropertyChanging();
					this._DownloadDate = value;
					this.SendPropertyChanged("DownloadDate");
					this.OnDownloadDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Report_ReportLog", Storage="_Report", ThisKey="ReportID", OtherKey="ID", IsForeignKey=true)]
		public Report Report
		{
			get
			{
				return this._Report.Entity;
			}
			set
			{
				Report previousValue = this._Report.Entity;
				if (((previousValue != value) 
							|| (this._Report.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Report.Entity = null;
						previousValue.ReportLogs.Remove(this);
					}
					this._Report.Entity = value;
					if ((value != null))
					{
						value.ReportLogs.Add(this);
						this._ReportID = value.ID;
					}
					else
					{
						this._ReportID = default(int);
					}
					this.SendPropertyChanged("Report");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ReportRequests")]
	public partial class ReportRequest : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private System.DateTime _CreatedOn;
		
		private int _UserID;
		
		private int _ReportType;
		
		private int _CompanyID;
		
		private int _Year;
		
		private bool _NoData;
		
		private string _EMBS;
		
		private System.Nullable<bool> _Deleted;
		
		private System.Nullable<bool> _MailSent;
		
		private System.Nullable<bool> _Paid;
		
		private EntityRef<User> _User;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnCreatedOnChanging(System.DateTime value);
    partial void OnCreatedOnChanged();
    partial void OnUserIDChanging(int value);
    partial void OnUserIDChanged();
    partial void OnReportTypeChanging(int value);
    partial void OnReportTypeChanged();
    partial void OnCompanyIDChanging(int value);
    partial void OnCompanyIDChanged();
    partial void OnYearChanging(int value);
    partial void OnYearChanged();
    partial void OnNoDataChanging(bool value);
    partial void OnNoDataChanged();
    partial void OnEMBSChanging(string value);
    partial void OnEMBSChanged();
    partial void OnDeletedChanging(System.Nullable<bool> value);
    partial void OnDeletedChanged();
    partial void OnMailSentChanging(System.Nullable<bool> value);
    partial void OnMailSentChanged();
    partial void OnPaidChanging(System.Nullable<bool> value);
    partial void OnPaidChanged();
    #endregion
		
		public ReportRequest()
		{
			this._User = default(EntityRef<User>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreatedOn", DbType="DateTime NOT NULL")]
		public System.DateTime CreatedOn
		{
			get
			{
				return this._CreatedOn;
			}
			set
			{
				if ((this._CreatedOn != value))
				{
					this.OnCreatedOnChanging(value);
					this.SendPropertyChanging();
					this._CreatedOn = value;
					this.SendPropertyChanged("CreatedOn");
					this.OnCreatedOnChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserID", DbType="Int NOT NULL")]
		public int UserID
		{
			get
			{
				return this._UserID;
			}
			set
			{
				if ((this._UserID != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIDChanging(value);
					this.SendPropertyChanging();
					this._UserID = value;
					this.SendPropertyChanged("UserID");
					this.OnUserIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ReportType", DbType="Int NOT NULL")]
		public int ReportType
		{
			get
			{
				return this._ReportType;
			}
			set
			{
				if ((this._ReportType != value))
				{
					this.OnReportTypeChanging(value);
					this.SendPropertyChanging();
					this._ReportType = value;
					this.SendPropertyChanged("ReportType");
					this.OnReportTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CompanyID", DbType="Int NOT NULL")]
		public int CompanyID
		{
			get
			{
				return this._CompanyID;
			}
			set
			{
				if ((this._CompanyID != value))
				{
					this.OnCompanyIDChanging(value);
					this.SendPropertyChanging();
					this._CompanyID = value;
					this.SendPropertyChanged("CompanyID");
					this.OnCompanyIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Year", DbType="Int NOT NULL")]
		public int Year
		{
			get
			{
				return this._Year;
			}
			set
			{
				if ((this._Year != value))
				{
					this.OnYearChanging(value);
					this.SendPropertyChanging();
					this._Year = value;
					this.SendPropertyChanged("Year");
					this.OnYearChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NoData", DbType="Bit NOT NULL")]
		public bool NoData
		{
			get
			{
				return this._NoData;
			}
			set
			{
				if ((this._NoData != value))
				{
					this.OnNoDataChanging(value);
					this.SendPropertyChanging();
					this._NoData = value;
					this.SendPropertyChanged("NoData");
					this.OnNoDataChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EMBS", DbType="NVarChar(50)")]
		public string EMBS
		{
			get
			{
				return this._EMBS;
			}
			set
			{
				if ((this._EMBS != value))
				{
					this.OnEMBSChanging(value);
					this.SendPropertyChanging();
					this._EMBS = value;
					this.SendPropertyChanged("EMBS");
					this.OnEMBSChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Deleted", DbType="Bit")]
		public System.Nullable<bool> Deleted
		{
			get
			{
				return this._Deleted;
			}
			set
			{
				if ((this._Deleted != value))
				{
					this.OnDeletedChanging(value);
					this.SendPropertyChanging();
					this._Deleted = value;
					this.SendPropertyChanged("Deleted");
					this.OnDeletedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MailSent", DbType="Bit")]
		public System.Nullable<bool> MailSent
		{
			get
			{
				return this._MailSent;
			}
			set
			{
				if ((this._MailSent != value))
				{
					this.OnMailSentChanging(value);
					this.SendPropertyChanging();
					this._MailSent = value;
					this.SendPropertyChanged("MailSent");
					this.OnMailSentChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Paid", DbType="Bit")]
		public System.Nullable<bool> Paid
		{
			get
			{
				return this._Paid;
			}
			set
			{
				if ((this._Paid != value))
				{
					this.OnPaidChanging(value);
					this.SendPropertyChanging();
					this._Paid = value;
					this.SendPropertyChanged("Paid");
					this.OnPaidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_ReportRequest", Storage="_User", ThisKey="UserID", OtherKey="ID", IsForeignKey=true)]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.ReportRequests.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.ReportRequests.Add(this);
						this._UserID = value.ID;
					}
					else
					{
						this._UserID = default(int);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Reports")]
	public partial class Report : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private System.Nullable<System.Guid> _UID;
		
		private System.Nullable<int> _ReportType;
		
		private string _Path;
		
		private int _CompanyID;
		
		private int _Year;
		
		private EntitySet<ReportLog> _ReportLogs;
		
		private EntitySet<UserReport> _UserReports;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnUIDChanging(System.Nullable<System.Guid> value);
    partial void OnUIDChanged();
    partial void OnReportTypeChanging(System.Nullable<int> value);
    partial void OnReportTypeChanged();
    partial void OnPathChanging(string value);
    partial void OnPathChanged();
    partial void OnCompanyIDChanging(int value);
    partial void OnCompanyIDChanged();
    partial void OnYearChanging(int value);
    partial void OnYearChanged();
    #endregion
		
		public Report()
		{
			this._ReportLogs = new EntitySet<ReportLog>(new Action<ReportLog>(this.attach_ReportLogs), new Action<ReportLog>(this.detach_ReportLogs));
			this._UserReports = new EntitySet<UserReport>(new Action<UserReport>(this.attach_UserReports), new Action<UserReport>(this.detach_UserReports));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UID", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> UID
		{
			get
			{
				return this._UID;
			}
			set
			{
				if ((this._UID != value))
				{
					this.OnUIDChanging(value);
					this.SendPropertyChanging();
					this._UID = value;
					this.SendPropertyChanged("UID");
					this.OnUIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ReportType", DbType="Int")]
		public System.Nullable<int> ReportType
		{
			get
			{
				return this._ReportType;
			}
			set
			{
				if ((this._ReportType != value))
				{
					this.OnReportTypeChanging(value);
					this.SendPropertyChanging();
					this._ReportType = value;
					this.SendPropertyChanged("ReportType");
					this.OnReportTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Path", DbType="NVarChar(250) NOT NULL", CanBeNull=false)]
		public string Path
		{
			get
			{
				return this._Path;
			}
			set
			{
				if ((this._Path != value))
				{
					this.OnPathChanging(value);
					this.SendPropertyChanging();
					this._Path = value;
					this.SendPropertyChanged("Path");
					this.OnPathChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CompanyID", DbType="Int NOT NULL")]
		public int CompanyID
		{
			get
			{
				return this._CompanyID;
			}
			set
			{
				if ((this._CompanyID != value))
				{
					this.OnCompanyIDChanging(value);
					this.SendPropertyChanging();
					this._CompanyID = value;
					this.SendPropertyChanged("CompanyID");
					this.OnCompanyIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Year", DbType="Int NOT NULL")]
		public int Year
		{
			get
			{
				return this._Year;
			}
			set
			{
				if ((this._Year != value))
				{
					this.OnYearChanging(value);
					this.SendPropertyChanging();
					this._Year = value;
					this.SendPropertyChanged("Year");
					this.OnYearChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Report_ReportLog", Storage="_ReportLogs", ThisKey="ID", OtherKey="ReportID")]
		public EntitySet<ReportLog> ReportLogs
		{
			get
			{
				return this._ReportLogs;
			}
			set
			{
				this._ReportLogs.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Report_UserReport", Storage="_UserReports", ThisKey="ID", OtherKey="ReportID")]
		public EntitySet<UserReport> UserReports
		{
			get
			{
				return this._UserReports;
			}
			set
			{
				this._UserReports.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_ReportLogs(ReportLog entity)
		{
			this.SendPropertyChanging();
			entity.Report = this;
		}
		
		private void detach_ReportLogs(ReportLog entity)
		{
			this.SendPropertyChanging();
			entity.Report = null;
		}
		
		private void attach_UserReports(UserReport entity)
		{
			this.SendPropertyChanging();
			entity.Report = this;
		}
		
		private void detach_UserReports(UserReport entity)
		{
			this.SendPropertyChanging();
			entity.Report = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ReportValues")]
	public partial class ReportValue : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private int _CompanyID;
		
		private int _ValueID;
		
		private int _YearID;
		
		private string _Value;
		
		private string _PercentValue;
		
		private string _Ind;
		
		private EntityRef<Value> _Value1;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnCompanyIDChanging(int value);
    partial void OnCompanyIDChanged();
    partial void OnValueIDChanging(int value);
    partial void OnValueIDChanged();
    partial void OnYearIDChanging(int value);
    partial void OnYearIDChanged();
    partial void OnValueChanging(string value);
    partial void OnValueChanged();
    partial void OnPercentValueChanging(string value);
    partial void OnPercentValueChanged();
    partial void OnIndChanging(string value);
    partial void OnIndChanged();
    #endregion
		
		public ReportValue()
		{
			this._Value1 = default(EntityRef<Value>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CompanyID", DbType="Int NOT NULL")]
		public int CompanyID
		{
			get
			{
				return this._CompanyID;
			}
			set
			{
				if ((this._CompanyID != value))
				{
					this.OnCompanyIDChanging(value);
					this.SendPropertyChanging();
					this._CompanyID = value;
					this.SendPropertyChanged("CompanyID");
					this.OnCompanyIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ValueID", DbType="Int NOT NULL")]
		public int ValueID
		{
			get
			{
				return this._ValueID;
			}
			set
			{
				if ((this._ValueID != value))
				{
					if (this._Value1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnValueIDChanging(value);
					this.SendPropertyChanging();
					this._ValueID = value;
					this.SendPropertyChanged("ValueID");
					this.OnValueIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_YearID", DbType="Int NOT NULL")]
		public int YearID
		{
			get
			{
				return this._YearID;
			}
			set
			{
				if ((this._YearID != value))
				{
					this.OnYearIDChanging(value);
					this.SendPropertyChanging();
					this._YearID = value;
					this.SendPropertyChanged("YearID");
					this.OnYearIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Value", DbType="NVarChar(50)")]
		public string Value
		{
			get
			{
				return this._Value;
			}
			set
			{
				if ((this._Value != value))
				{
					this.OnValueChanging(value);
					this.SendPropertyChanging();
					this._Value = value;
					this.SendPropertyChanged("Value");
					this.OnValueChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PercentValue", DbType="NVarChar(50)")]
		public string PercentValue
		{
			get
			{
				return this._PercentValue;
			}
			set
			{
				if ((this._PercentValue != value))
				{
					this.OnPercentValueChanging(value);
					this.SendPropertyChanging();
					this._PercentValue = value;
					this.SendPropertyChanged("PercentValue");
					this.OnPercentValueChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Ind", DbType="NVarChar(50)")]
		public string Ind
		{
			get
			{
				return this._Ind;
			}
			set
			{
				if ((this._Ind != value))
				{
					this.OnIndChanging(value);
					this.SendPropertyChanging();
					this._Ind = value;
					this.SendPropertyChanged("Ind");
					this.OnIndChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Value_ReportValue", Storage="_Value1", ThisKey="ValueID", OtherKey="ID", IsForeignKey=true)]
		public Value Value1
		{
			get
			{
				return this._Value1.Entity;
			}
			set
			{
				Value previousValue = this._Value1.Entity;
				if (((previousValue != value) 
							|| (this._Value1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Value1.Entity = null;
						previousValue.ReportValues.Remove(this);
					}
					this._Value1.Entity = value;
					if ((value != null))
					{
						value.ReportValues.Add(this);
						this._ValueID = value.ID;
					}
					else
					{
						this._ValueID = default(int);
					}
					this.SendPropertyChanged("Value1");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.UserReports")]
	public partial class UserReport : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private int _UserID;
		
		private int _ReportID;
		
		private int _Downloads;
		
		private System.DateTime _DateCreated;
		
		private System.Nullable<int> _PackID;
		
		private EntityRef<PrepayPack> _PrepayPack;
		
		private EntityRef<Report> _Report;
		
		private EntityRef<User> _User;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnUserIDChanging(int value);
    partial void OnUserIDChanged();
    partial void OnReportIDChanging(int value);
    partial void OnReportIDChanged();
    partial void OnDownloadsChanging(int value);
    partial void OnDownloadsChanged();
    partial void OnDateCreatedChanging(System.DateTime value);
    partial void OnDateCreatedChanged();
    partial void OnPackIDChanging(System.Nullable<int> value);
    partial void OnPackIDChanged();
    #endregion
		
		public UserReport()
		{
			this._PrepayPack = default(EntityRef<PrepayPack>);
			this._Report = default(EntityRef<Report>);
			this._User = default(EntityRef<User>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserID", DbType="Int NOT NULL")]
		public int UserID
		{
			get
			{
				return this._UserID;
			}
			set
			{
				if ((this._UserID != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIDChanging(value);
					this.SendPropertyChanging();
					this._UserID = value;
					this.SendPropertyChanged("UserID");
					this.OnUserIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ReportID", DbType="Int NOT NULL")]
		public int ReportID
		{
			get
			{
				return this._ReportID;
			}
			set
			{
				if ((this._ReportID != value))
				{
					if (this._Report.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnReportIDChanging(value);
					this.SendPropertyChanging();
					this._ReportID = value;
					this.SendPropertyChanged("ReportID");
					this.OnReportIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Downloads", DbType="Int NOT NULL")]
		public int Downloads
		{
			get
			{
				return this._Downloads;
			}
			set
			{
				if ((this._Downloads != value))
				{
					this.OnDownloadsChanging(value);
					this.SendPropertyChanging();
					this._Downloads = value;
					this.SendPropertyChanged("Downloads");
					this.OnDownloadsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateCreated", DbType="DateTime NOT NULL")]
		public System.DateTime DateCreated
		{
			get
			{
				return this._DateCreated;
			}
			set
			{
				if ((this._DateCreated != value))
				{
					this.OnDateCreatedChanging(value);
					this.SendPropertyChanging();
					this._DateCreated = value;
					this.SendPropertyChanged("DateCreated");
					this.OnDateCreatedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PackID", DbType="Int")]
		public System.Nullable<int> PackID
		{
			get
			{
				return this._PackID;
			}
			set
			{
				if ((this._PackID != value))
				{
					if (this._PrepayPack.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPackIDChanging(value);
					this.SendPropertyChanging();
					this._PackID = value;
					this.SendPropertyChanged("PackID");
					this.OnPackIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="PrepayPack_UserReport", Storage="_PrepayPack", ThisKey="PackID", OtherKey="ID", IsForeignKey=true)]
		public PrepayPack PrepayPack
		{
			get
			{
				return this._PrepayPack.Entity;
			}
			set
			{
				PrepayPack previousValue = this._PrepayPack.Entity;
				if (((previousValue != value) 
							|| (this._PrepayPack.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._PrepayPack.Entity = null;
						previousValue.UserReports.Remove(this);
					}
					this._PrepayPack.Entity = value;
					if ((value != null))
					{
						value.UserReports.Add(this);
						this._PackID = value.ID;
					}
					else
					{
						this._PackID = default(Nullable<int>);
					}
					this.SendPropertyChanged("PrepayPack");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Report_UserReport", Storage="_Report", ThisKey="ReportID", OtherKey="ID", IsForeignKey=true)]
		public Report Report
		{
			get
			{
				return this._Report.Entity;
			}
			set
			{
				Report previousValue = this._Report.Entity;
				if (((previousValue != value) 
							|| (this._Report.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Report.Entity = null;
						previousValue.UserReports.Remove(this);
					}
					this._Report.Entity = value;
					if ((value != null))
					{
						value.UserReports.Add(this);
						this._ReportID = value.ID;
					}
					else
					{
						this._ReportID = default(int);
					}
					this.SendPropertyChanged("Report");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_UserReport", Storage="_User", ThisKey="UserID", OtherKey="ID", IsForeignKey=true)]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.UserReports.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.UserReports.Add(this);
						this._UserID = value.ID;
					}
					else
					{
						this._UserID = default(int);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Users")]
	public partial class User : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _Username;
		
		private string _Password;
		
		private string _Email;
		
		private string _EMBS;
		
		private bool _IsActive;
		
		private System.Nullable<System.Guid> _ActivationCode;
		
		private EntitySet<PrepayPack> _PrepayPacks;
		
		private EntitySet<ReportRequest> _ReportRequests;
		
		private EntitySet<UserReport> _UserReports;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnUsernameChanging(string value);
    partial void OnUsernameChanged();
    partial void OnPasswordChanging(string value);
    partial void OnPasswordChanged();
    partial void OnEmailChanging(string value);
    partial void OnEmailChanged();
    partial void OnEMBSChanging(string value);
    partial void OnEMBSChanged();
    partial void OnIsActiveChanging(bool value);
    partial void OnIsActiveChanged();
    partial void OnActivationCodeChanging(System.Nullable<System.Guid> value);
    partial void OnActivationCodeChanged();
    #endregion
		
		public User()
		{
			this._PrepayPacks = new EntitySet<PrepayPack>(new Action<PrepayPack>(this.attach_PrepayPacks), new Action<PrepayPack>(this.detach_PrepayPacks));
			this._ReportRequests = new EntitySet<ReportRequest>(new Action<ReportRequest>(this.attach_ReportRequests), new Action<ReportRequest>(this.detach_ReportRequests));
			this._UserReports = new EntitySet<UserReport>(new Action<UserReport>(this.attach_UserReports), new Action<UserReport>(this.detach_UserReports));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Username", DbType="NVarChar(250) NOT NULL", CanBeNull=false)]
		public string Username
		{
			get
			{
				return this._Username;
			}
			set
			{
				if ((this._Username != value))
				{
					this.OnUsernameChanging(value);
					this.SendPropertyChanging();
					this._Username = value;
					this.SendPropertyChanged("Username");
					this.OnUsernameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Password", DbType="NVarChar(250) NOT NULL", CanBeNull=false)]
		public string Password
		{
			get
			{
				return this._Password;
			}
			set
			{
				if ((this._Password != value))
				{
					this.OnPasswordChanging(value);
					this.SendPropertyChanging();
					this._Password = value;
					this.SendPropertyChanged("Password");
					this.OnPasswordChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Email", DbType="NVarChar(250) NOT NULL", CanBeNull=false)]
		public string Email
		{
			get
			{
				return this._Email;
			}
			set
			{
				if ((this._Email != value))
				{
					this.OnEmailChanging(value);
					this.SendPropertyChanging();
					this._Email = value;
					this.SendPropertyChanged("Email");
					this.OnEmailChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EMBS", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string EMBS
		{
			get
			{
				return this._EMBS;
			}
			set
			{
				if ((this._EMBS != value))
				{
					this.OnEMBSChanging(value);
					this.SendPropertyChanging();
					this._EMBS = value;
					this.SendPropertyChanged("EMBS");
					this.OnEMBSChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsActive", DbType="Bit NOT NULL")]
		public bool IsActive
		{
			get
			{
				return this._IsActive;
			}
			set
			{
				if ((this._IsActive != value))
				{
					this.OnIsActiveChanging(value);
					this.SendPropertyChanging();
					this._IsActive = value;
					this.SendPropertyChanged("IsActive");
					this.OnIsActiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ActivationCode", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> ActivationCode
		{
			get
			{
				return this._ActivationCode;
			}
			set
			{
				if ((this._ActivationCode != value))
				{
					this.OnActivationCodeChanging(value);
					this.SendPropertyChanging();
					this._ActivationCode = value;
					this.SendPropertyChanged("ActivationCode");
					this.OnActivationCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_PrepayPack", Storage="_PrepayPacks", ThisKey="ID", OtherKey="UserID")]
		public EntitySet<PrepayPack> PrepayPacks
		{
			get
			{
				return this._PrepayPacks;
			}
			set
			{
				this._PrepayPacks.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_ReportRequest", Storage="_ReportRequests", ThisKey="ID", OtherKey="UserID")]
		public EntitySet<ReportRequest> ReportRequests
		{
			get
			{
				return this._ReportRequests;
			}
			set
			{
				this._ReportRequests.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_UserReport", Storage="_UserReports", ThisKey="ID", OtherKey="UserID")]
		public EntitySet<UserReport> UserReports
		{
			get
			{
				return this._UserReports;
			}
			set
			{
				this._UserReports.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_PrepayPacks(PrepayPack entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_PrepayPacks(PrepayPack entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
		
		private void attach_ReportRequests(ReportRequest entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_ReportRequests(ReportRequest entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
		
		private void attach_UserReports(UserReport entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_UserReports(UserReport entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.[Values]")]
	public partial class Value : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _Name;
		
		private System.Nullable<int> _Type;
		
		private string _Description;
		
		private EntitySet<ReportValue> _ReportValues;
		
		private EntitySet<ReportValuesBackup> _ReportValuesBackups;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnTypeChanging(System.Nullable<int> value);
    partial void OnTypeChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    #endregion
		
		public Value()
		{
			this._ReportValues = new EntitySet<ReportValue>(new Action<ReportValue>(this.attach_ReportValues), new Action<ReportValue>(this.detach_ReportValues));
			this._ReportValuesBackups = new EntitySet<ReportValuesBackup>(new Action<ReportValuesBackup>(this.attach_ReportValuesBackups), new Action<ReportValuesBackup>(this.detach_ReportValuesBackups));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(250)")]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Type", DbType="Int")]
		public System.Nullable<int> Type
		{
			get
			{
				return this._Type;
			}
			set
			{
				if ((this._Type != value))
				{
					this.OnTypeChanging(value);
					this.SendPropertyChanging();
					this._Type = value;
					this.SendPropertyChanged("Type");
					this.OnTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="NVarChar(MAX)")]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Value_ReportValue", Storage="_ReportValues", ThisKey="ID", OtherKey="ValueID")]
		public EntitySet<ReportValue> ReportValues
		{
			get
			{
				return this._ReportValues;
			}
			set
			{
				this._ReportValues.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Value_ReportValuesBackup", Storage="_ReportValuesBackups", ThisKey="ID", OtherKey="ValueID")]
		public EntitySet<ReportValuesBackup> ReportValuesBackups
		{
			get
			{
				return this._ReportValuesBackups;
			}
			set
			{
				this._ReportValuesBackups.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_ReportValues(ReportValue entity)
		{
			this.SendPropertyChanging();
			entity.Value1 = this;
		}
		
		private void detach_ReportValues(ReportValue entity)
		{
			this.SendPropertyChanging();
			entity.Value1 = null;
		}
		
		private void attach_ReportValuesBackups(ReportValuesBackup entity)
		{
			this.SendPropertyChanging();
			entity.Value1 = this;
		}
		
		private void detach_ReportValuesBackups(ReportValuesBackup entity)
		{
			this.SendPropertyChanging();
			entity.Value1 = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ReportValuesBackup")]
	public partial class ReportValuesBackup : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private int _CompanyID;
		
		private int _ValueID;
		
		private int _YearID;
		
		private string _Value;
		
		private string _PercentValue;
		
		private string _Ind;
		
		private EntityRef<Value> _Value1;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnCompanyIDChanging(int value);
    partial void OnCompanyIDChanged();
    partial void OnValueIDChanging(int value);
    partial void OnValueIDChanged();
    partial void OnYearIDChanging(int value);
    partial void OnYearIDChanged();
    partial void OnValueChanging(string value);
    partial void OnValueChanged();
    partial void OnPercentValueChanging(string value);
    partial void OnPercentValueChanged();
    partial void OnIndChanging(string value);
    partial void OnIndChanged();
    #endregion
		
		public ReportValuesBackup()
		{
			this._Value1 = default(EntityRef<Value>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CompanyID", DbType="Int NOT NULL")]
		public int CompanyID
		{
			get
			{
				return this._CompanyID;
			}
			set
			{
				if ((this._CompanyID != value))
				{
					this.OnCompanyIDChanging(value);
					this.SendPropertyChanging();
					this._CompanyID = value;
					this.SendPropertyChanged("CompanyID");
					this.OnCompanyIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ValueID", DbType="Int NOT NULL")]
		public int ValueID
		{
			get
			{
				return this._ValueID;
			}
			set
			{
				if ((this._ValueID != value))
				{
					if (this._Value1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnValueIDChanging(value);
					this.SendPropertyChanging();
					this._ValueID = value;
					this.SendPropertyChanged("ValueID");
					this.OnValueIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_YearID", DbType="Int NOT NULL")]
		public int YearID
		{
			get
			{
				return this._YearID;
			}
			set
			{
				if ((this._YearID != value))
				{
					this.OnYearIDChanging(value);
					this.SendPropertyChanging();
					this._YearID = value;
					this.SendPropertyChanged("YearID");
					this.OnYearIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Value", DbType="NVarChar(50)")]
		public string Value
		{
			get
			{
				return this._Value;
			}
			set
			{
				if ((this._Value != value))
				{
					this.OnValueChanging(value);
					this.SendPropertyChanging();
					this._Value = value;
					this.SendPropertyChanged("Value");
					this.OnValueChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PercentValue", DbType="NVarChar(50)")]
		public string PercentValue
		{
			get
			{
				return this._PercentValue;
			}
			set
			{
				if ((this._PercentValue != value))
				{
					this.OnPercentValueChanging(value);
					this.SendPropertyChanging();
					this._PercentValue = value;
					this.SendPropertyChanged("PercentValue");
					this.OnPercentValueChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Ind", DbType="NVarChar(50)")]
		public string Ind
		{
			get
			{
				return this._Ind;
			}
			set
			{
				if ((this._Ind != value))
				{
					this.OnIndChanging(value);
					this.SendPropertyChanging();
					this._Ind = value;
					this.SendPropertyChanged("Ind");
					this.OnIndChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Value_ReportValuesBackup", Storage="_Value1", ThisKey="ValueID", OtherKey="ID", IsForeignKey=true)]
		public Value Value1
		{
			get
			{
				return this._Value1.Entity;
			}
			set
			{
				Value previousValue = this._Value1.Entity;
				if (((previousValue != value) 
							|| (this._Value1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Value1.Entity = null;
						previousValue.ReportValuesBackups.Remove(this);
					}
					this._Value1.Entity = value;
					if ((value != null))
					{
						value.ReportValuesBackups.Add(this);
						this._ValueID = value.ID;
					}
					else
					{
						this._ValueID = default(int);
					}
					this.SendPropertyChanged("Value1");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	public partial class GetReportRequestsResult
	{
		
		private int _ID;
		
		private System.DateTime _CreatedOn;
		
		private int _CompanyID;
		
		private string _EMBS;
		
		private int _Year;
		
		private bool _NoData;
		
		private int _ReportType;
		
		private int _UserID;
		
		private System.Nullable<bool> _Deleted;
		
		private System.Nullable<bool> _MailSent;
		
		private System.Nullable<bool> _Paid;
		
		private string _ReportTypeString;
		
		private System.Nullable<int> _SendMail;
		
		private string _StatusText;
		
		private string _CompanyName;
		
		private string _Username;
		
		private System.Nullable<int> _Filter;
		
		public GetReportRequestsResult()
		{
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", DbType="Int NOT NULL")]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this._ID = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreatedOn", DbType="DateTime NOT NULL")]
		public System.DateTime CreatedOn
		{
			get
			{
				return this._CreatedOn;
			}
			set
			{
				if ((this._CreatedOn != value))
				{
					this._CreatedOn = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CompanyID", DbType="Int NOT NULL")]
		public int CompanyID
		{
			get
			{
				return this._CompanyID;
			}
			set
			{
				if ((this._CompanyID != value))
				{
					this._CompanyID = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EMBS", DbType="NVarChar(50)")]
		public string EMBS
		{
			get
			{
				return this._EMBS;
			}
			set
			{
				if ((this._EMBS != value))
				{
					this._EMBS = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Year", DbType="Int NOT NULL")]
		public int Year
		{
			get
			{
				return this._Year;
			}
			set
			{
				if ((this._Year != value))
				{
					this._Year = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NoData", DbType="Bit NOT NULL")]
		public bool NoData
		{
			get
			{
				return this._NoData;
			}
			set
			{
				if ((this._NoData != value))
				{
					this._NoData = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ReportType", DbType="Int NOT NULL")]
		public int ReportType
		{
			get
			{
				return this._ReportType;
			}
			set
			{
				if ((this._ReportType != value))
				{
					this._ReportType = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserID", DbType="Int NOT NULL")]
		public int UserID
		{
			get
			{
				return this._UserID;
			}
			set
			{
				if ((this._UserID != value))
				{
					this._UserID = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Deleted", DbType="Bit")]
		public System.Nullable<bool> Deleted
		{
			get
			{
				return this._Deleted;
			}
			set
			{
				if ((this._Deleted != value))
				{
					this._Deleted = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MailSent", DbType="Bit")]
		public System.Nullable<bool> MailSent
		{
			get
			{
				return this._MailSent;
			}
			set
			{
				if ((this._MailSent != value))
				{
					this._MailSent = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Paid", DbType="Bit")]
		public System.Nullable<bool> Paid
		{
			get
			{
				return this._Paid;
			}
			set
			{
				if ((this._Paid != value))
				{
					this._Paid = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ReportTypeString", DbType="NVarChar(18)")]
		public string ReportTypeString
		{
			get
			{
				return this._ReportTypeString;
			}
			set
			{
				if ((this._ReportTypeString != value))
				{
					this._ReportTypeString = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SendMail", DbType="Int")]
		public System.Nullable<int> SendMail
		{
			get
			{
				return this._SendMail;
			}
			set
			{
				if ((this._SendMail != value))
				{
					this._SendMail = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StatusText", DbType="VarChar(16)")]
		public string StatusText
		{
			get
			{
				return this._StatusText;
			}
			set
			{
				if ((this._StatusText != value))
				{
					this._StatusText = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CompanyName", DbType="NVarChar(500)")]
		public string CompanyName
		{
			get
			{
				return this._CompanyName;
			}
			set
			{
				if ((this._CompanyName != value))
				{
					this._CompanyName = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Username", DbType="NVarChar(250)")]
		public string Username
		{
			get
			{
				return this._Username;
			}
			set
			{
				if ((this._Username != value))
				{
					this._Username = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Filter", DbType="Int")]
		public System.Nullable<int> Filter
		{
			get
			{
				return this._Filter;
			}
			set
			{
				if ((this._Filter != value))
				{
					this._Filter = value;
				}
			}
		}
	}
}
#pragma warning restore 1591
